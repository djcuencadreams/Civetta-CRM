üö® ACT√öA EXACTAMENTE COMO TE INDICO. NO IMPROVISES NADA. NO USES CAMPOS OBSOLETOS.

üéØ OBJETIVO:
Implementar manejo profesional de n√∫meros de tel√©fono para clientes, con validaci√≥n y guardado en formato E.164 (ej. +593995815652) en todo el sistema CRM (Wizard, CRM panel, API y base de datos).

---

üîÅ CAMBIOS EN FRONTEND:

1. Sustituye `phoneCountry` y `phoneNumber` por un √∫nico campo `phone`, usando el componente `react-phone-number-input` (versi√≥n con dropdown y banderas).

2. En los formularios:
   - `ShippingLabelForm.tsx`
   - `CustomerForm.tsx`

   Reemplaza los campos anteriores por:

import PhoneInput from 'react-phone-number-input'
import 'react-phone-number-input/style.css'

<PhoneInput
  defaultCountry="EC"
  value={form.watch('phone')}
  onChange={(value) => form.setValue('phone', value || '')}
  international
  countryCallingCodeEditable={true}
  placeholder="Ej. 0999999999 (se convertir√° a formato internacional)"
/>

3. Elimina por completo cualquier uso o estado relacionado a:
   - `phoneCountry`
   - `phoneNumber`
   - `countryCode`
   - otros campos telef√≥nicos separados

---

üì¶ CAMBIOS EN BACKEND:

1. Instala (si no est√°): npm install libphonenumber-js

2. Crea un archivo `server/utils/phone-utils.ts` con:

import { parsePhoneNumberFromString } from 'libphonenumber-js'

export function normalizePhoneNumber(raw: string): string | null {
  const parsed = parsePhoneNumberFromString(raw)
  if (!parsed || !parsed.isValid()) return null
  return parsed.number // formato E.164: ej. +593999999999
}

3. En `server/services/customers.service.ts`, en los m√©todos `createCustomer` y `updateCustomer`, importa:

import { normalizePhoneNumber } from '../utils/phone-utils'

Y antes de guardar el cliente, a√±ade:

const phoneFormatted = normalizePhoneNumber(data.phone || '')
if (!phoneFormatted) {
  throw new Error('N√∫mero de tel√©fono inv√°lido')
}

Y luego √∫salo:

phone: phoneFormatted,

---

üîé VALIDACIONES UX (frontend):

- Si el n√∫mero ingresado no es v√°lido, muestra un mensaje visual claro debajo del campo.
- Si puedes, implementa validaci√≥n usando `react-hook-form` con:

rules={{
  required: 'Este campo es obligatorio',
  validate: value =>
    isValidPhoneNumber(value || '') || 'N√∫mero de tel√©fono inv√°lido'
}}

(usa: import { isValidPhoneNumber } from 'react-phone-number-input')

---

‚öôÔ∏è EN BASE DE DATOS:

- Aseg√∫rate de que el campo `phone` en la tabla `customers` sea tipo `text`, √∫nico, y se almacene solo en formato E.164.

---

üß™ PRUEBA:

1. Crear un cliente con n√∫mero ecuatoriano: 0999999999
2. Crear otro con n√∫mero de EE.UU.: +13051234567
3. Verifica:
   - Que se muestre correctamente en formulario, lista y ficha de cliente.
   - Que se guarde como +593999999999 y +13051234567 en la DB.
   - Que nunca se guarde el 0 inicial para Ecuador ni doble +

---

‚ö†Ô∏è RESTRICCIONES:

‚úÖ NO dupliques l√≥gica innecesaria  
‚úÖ NO mantengas los campos antiguos  
‚úÖ NO guardes country code separado  
‚úÖ NO guardes el n√∫mero si no es v√°lido  
‚úÖ S√ç verifica que todo el sistema funcione tras estos cambios

Esto es un cambio estructural, profesional y globalmente validado. Ejec√∫talo exactamente como se indica.