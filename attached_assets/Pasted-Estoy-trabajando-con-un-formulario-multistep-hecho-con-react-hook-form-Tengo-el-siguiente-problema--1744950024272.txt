Estoy trabajando con un formulario multistep hecho con react-hook-form. Tengo el siguiente problema:

üî¥ Bug visual:

1. En el paso 2, tengo el campo email.
2. En el paso 3, tengo el campo shippingInstructions.

Problemas:
- Al avanzar del paso 2 al 3, el campo shippingInstructions aparece con el valor del email.
- Si regreso del paso 3 al paso 2, el campo email aparece vac√≠o.
- En el paso 4 (Resumen), todos los datos est√°n bien, as√≠ que el problema es solo de visualizaci√≥n en la UI (el estado funciona bien).

üéØ Lo que quiero:
‚úÖ Que email siempre se muestre correctamente en el paso 2.  
‚úÖ Que shippingInstructions nunca tome el valor de email.  
‚úÖ Que ambos campos mantengan su valor correctamente entre pasos.  
‚úÖ Que no haya valores cruzados ni campos que se vac√≠en visualmente al cambiar de paso.

üì¶ Estoy usando react-hook-form, useFormContext y FormProvider. El formulario ya guarda los datos bien, solo hay errores visuales de sincronizaci√≥n.

üìå Instrucciones:
1. Usa useFormContext() y useWatch() si es necesario para mantener sincron√≠a correcta entre pasos.
2. Aseg√∫rate de que cada campo est√© correctamente registrado usando register('email'), register('shippingInstructions'), etc.
3. Si usas value={...} en alg√∫n input, aseg√∫rate de usar tambi√©n onChange y setValue.
4. Agrega shouldUnregister: false en useForm() del FormProvider para que los valores no se pierdan al desmontar los pasos.
5. Usa defaultValue en los inputs si no usas useWatch.

üîß Corrige estos 2 archivos del proyecto:

- client/src/components/shipping/Step2_CustomerData.tsx
- client/src/components/shipping/Step3_ShippingAddress.tsx

Y aplica esto en cada uno:

‚úÖ Ejemplo para Step 2 ‚Äì email:
import { useFormContext } from 'react-hook-form';

const Step2_CustomerData = () => {
  const { register } = useFormContext();

  return (
    <input
      type="email"
      {...register('email')}
      className="input-style"
      placeholder="Email"
    />
  );
};
export default Step2_CustomerData;

‚úÖ Ejemplo para Step 3 ‚Äì shippingInstructions:
import { useFormContext } from 'react-hook-form';

const Step3_ShippingAddress = () => {
  const { register } = useFormContext();

  return (
    <textarea
      {...register('shippingInstructions')}
      className="input-style"
      placeholder="Instrucciones especiales"
    />
  );
};
export default Step3_ShippingAddress;

‚ö†Ô∏è Si el formulario no usa FormProvider, agrega ese wrapper en el archivo principal del formulario multistep:

‚úÖ FormProvider con shouldUnregister:
const methods = useForm({ shouldUnregister: false });

<FormProvider {...methods}>
  <ShippingFormSteps />
</FormProvider>

Aplica estos cambios para que los campos mantengan su valor y no se mezclen ni vac√≠en visualmente. El estado ya funciona bien, esto es solo sincronizaci√≥n visual entre pasos del wizard.