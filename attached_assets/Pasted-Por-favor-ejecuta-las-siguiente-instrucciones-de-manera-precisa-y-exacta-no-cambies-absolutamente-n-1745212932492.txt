Por favor ejecuta las siguiente instrucciones de manera precisa y exacta, no cambies absolutamente nada sin mi autorizaci√≥n expresa:

Reemplaza completamente el contenido del archivo:

`client/src/components/shipping/Step1_Form.tsx`

con el siguiente c√≥digo corregido y limpio. Este c√≥digo soluciona el error de "Cannot destructure property 'getFieldState'..." verificando correctamente si el contexto `useShippingForm()` est√° disponible antes de desestructurarlo. Tambi√©n conserva toda la funcionalidad anterior de cliente existente y nuevo cliente.

---

üìÑ Nuevo contenido del archivo `Step1_Form.tsx`:
```tsx
import { useState, useEffect } from "react";
import { useShippingForm } from "@/hooks/useShippingForm";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import "@/styles/stepAnimations.css";

function Step1_Form() {
  const shippingForm = useShippingForm();

  // Verifica que el contexto est√© disponible antes de desestructurar
  if (!shippingForm) {
    return (
      <div className="p-4 text-red-700 bg-red-100 rounded-md text-center">
        ‚ö†Ô∏è Error: El contexto del formulario no est√° disponible. Aseg√∫rate de que el componente est√© envuelto en {"<ShippingFormProvider>"}.
      </div>
    );
  }

  const {
    customerType,
    setCustomerType,
    searchType,
    setSearchType,
    searchIdentifier,
    setSearchIdentifier,
    checkCustomer,
    isCustomerFound,
    setIsCustomerFound,
    customerData,
    isLoading,
  } = shippingForm;

  const [isSearching, setIsSearching] = useState(false);
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    setIsVisible(true);
    return () => setIsVisible(false);
  }, []);

  const handleSearch = async () => {
    if (!checkCustomer) return;
    try {
      setIsSearching(true);
      await checkCustomer();
    } catch (error) {
      console.error("‚ùå Error buscando cliente:", error);
    } finally {
      setIsSearching(false);
    }
  };

  return (
    <div className={`step-content ${isVisible ? "fade-in" : "fade-out"}`}>
      <div className="step-title">
        <h2 className="text-xl font-semibold">Tipo de Cliente</h2>
      </div>

      <RadioGroup
        value={customerType}
        onValueChange={(value) => setCustomerType(value === "existing" ? "existing" : "new")}
        className="flex gap-4"
      >
        <RadioGroupItem value="existing" id="existing" />
        <label htmlFor="existing" className="ml-2">Cliente Existente</label>

        <RadioGroupItem value="new" id="new" />
        <label htmlFor="new" className="ml-2">Nuevo Cliente</label>
      </RadioGroup>

      {customerType === "existing" && (
        <div className="mt-6">
          <div className="flex items-center gap-4 mb-4">
            <select
              value={searchType}
              onChange={(e) => setSearchType(e.target.value as "identification" | "email" | "phone")}
              className="border px-3 py-2 rounded-md"
            >
              <option value="identification">C√©dula / RUC</option>
              <option value="email">Correo</option>
              <option value="phone">Tel√©fono</option>
            </select>

            <input
              type="text"
              value={searchIdentifier}
              onChange={(e) => setSearchIdentifier(e.target.value)}
              placeholder={searchType === "identification"
                ? "Ej: 0103556734"
                : searchType === "email"
                ? "Ej: cliente@ejemplo.com"
                : "Ej: 0991234567"}
              className="flex-1 border px-3 py-2 rounded-md"
            />

            <button
              type="button"
              onClick={handleSearch}
              disabled={isSearching}
              className="bg-black text-white px-4 py-2 rounded-md"
            >
              {isSearching ? "Buscando..." : "Buscar"}
            </button>
          </div>

          {!isCustomerFound && searchIdentifier !== "" && (
            <div className="p-3 text-sm text-yellow-700 bg-yellow-100 rounded-md">
              Cliente no encontrado. Puedes registrar uno nuevo.
            </div>
          )}

          {isCustomerFound && customerData && (
            <div className="p-3 text-sm text-green-700 bg-green-100 rounded-md">
              <p className="font-medium">Cliente encontrado ‚úÖ</p>
              <p>
                {customerData.firstName} {customerData.lastName} ‚Äì {customerData.email}
              </p>
            </div>
          )}
        </div>
      )}

      {customerType === "new" && (
        <div className="border rounded-md p-4 bg-gray-50 fade-in step-transition mt-6">
          <h3 className="font-semibold">üßæ Nuevo Cliente</h3>
          <p className="text-sm text-gray-600">
            Completa los siguientes pasos para registrar un nuevo cliente y su direcci√≥n de env√≠o.
          </p>
        </div>
      )}
    </div>
  );
}

export default Step1_Form;

Reemplaza el archivo y compila todo. Av√≠same si hay errores o conflictos.