Realiza las siguientes tareas en el proyecto actual con precisi√≥n extrema, sin modificar nada fuera del alcance indicado, y siguiendo buenas pr√°cticas de desarrollo modular y React moderno:

1. üåÄ A√±adir transiciones suaves entre los pasos del formulario multistep:

   - En los componentes `Step1_Form.tsx`, `Step2_Form.tsx`, y `Step3_Form.tsx` agrega una animaci√≥n CSS de entrada/salida al contenedor principal. Usa clases como `.fade-in`, `.fade-out` o transici√≥n `opacity` y `transform`. Aplica un wrapper div que permita animar el componente cada vez que se monta o desmonta.
   - Implementa la l√≥gica de montaje condicional para que solo el paso activo est√© visible, y los dem√°s est√©n ocultos con animaci√≥n de salida (sin renderizarse completamente).
   - Crea un archivo `client/src/styles/stepAnimations.css` y aplica all√≠ las animaciones globales. Aseg√∫rate de importar este CSS en el `ShippingLabelForm.tsx`.

2. üíæ Guardado autom√°tico como "borrador":

   - En el hook `useShippingForm.ts`, a√±ade un efecto `useEffect()` que se dispare **cada vez que se avanza de paso** (cuando cambia `currentStep`).
   - Este efecto debe ejecutar una llamada a `POST /api/shipping/save-draft` con el estado actual del formulario.
   - Si no existe, crea una nueva ruta en `server/routes-shipping-react.ts` para manejar `/api/shipping/save-draft`, que guarde la orden como borrador (status: "draft") en la tabla `orders`.

3. üîÅ Actualizar lista de pedidos en el CRM (sin recargar):

   - En el hook `useShippingForm.ts`, cuando el paso final termine exitosamente (`step === 3` y `form completed`), emitir un evento `CustomEvent` llamado `"orderSaved"` con el `orderId` reci√©n creado.
   - En la interfaz de CRM donde se listan las √≥rdenes, escucha ese evento con `window.addEventListener("orderSaved", callback)` para refrescar solo la lista de pedidos autom√°ticamente.

4. üßº Limpieza y buenas pr√°cticas:

   - Elimina cualquier referencia residual a `customerType === 'check'` si ya no existe en el flujo.
   - Aseg√∫rate de que todos los estados en `useShippingForm()` est√©n correctamente tipados y no haya `any`.
   - Verifica que `ShippingLabelForm.tsx` importe correctamente los pasos desde `./Step1_Form`, `./Step2_Form`, `./Step3_Form` y que no haya ning√∫n componente embebido inline.

Una vez que todo est√© implementado, reinicia el servidor y confirma que:

‚úì Las animaciones funcionan entre pasos.  
‚úì Se hace `POST` autom√°tico a `/api/shipping/save-draft` al avanzar.  
‚úì El evento `orderSaved` se emite y puede ser escuchado desde el CRM.  
‚úì El c√≥digo est√© limpio y modular seg√∫n lo solicitado.