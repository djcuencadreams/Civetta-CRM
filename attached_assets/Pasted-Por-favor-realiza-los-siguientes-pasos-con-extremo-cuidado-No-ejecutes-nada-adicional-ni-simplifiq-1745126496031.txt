Por favor, realiza los siguientes pasos con extremo cuidado. No ejecutes nada adicional ni simplifiques los pasos:

‚∏ª

üìÅ ARCHIVOS A MODIFICAR O CREAR
	1.	client/src/components/shipping/ShippingLabelForm.tsx
	2.	client/src/components/shipping/Step2_Form.tsx
	3.	client/src/components/shipping/Step3_Form.tsx
	4.	client/src/hooks/useShippingForm.ts (NUEVO)
	5.	server/routes-shipping-react.ts
	6.	server/index.ts

‚∏ª

‚öôÔ∏è INSTRUCCIONES PASO A PASO

‚úÖ 1. Crear Hook useShippingForm.ts

Ubicaci√≥n: client/src/hooks/useShippingForm.ts
Descripci√≥n: Este hook debe controlar el estado global del formulario, los pasos, la l√≥gica de guardar el progreso como draft y hacer auto-sync con el backend sin recargar la p√°gina.

Funciones clave que debe contener:
	‚Ä¢	goToNextStep()
	‚Ä¢	goToPreviousStep()
	‚Ä¢	updateFormData(field: string, value: any)
	‚Ä¢	saveAsDraft()
	‚Ä¢	submitForm()
	‚Ä¢	resetForm()

El hook debe mantener el estado con useState y exponerlo con useContext si es necesario.

‚∏ª

‚úÖ 2. Actualizar ShippingLabelForm.tsx

Reemplaza su l√≥gica interna para:
	‚Ä¢	Usar el hook useShippingForm.
	‚Ä¢	Cargar Step1, Step2 y Step3 como componentes separados.
	‚Ä¢	Incluir transiciones suaves entre pasos (framer-motion o CSS b√°sico).
	‚Ä¢	Llamar saveAsDraft() al avanzar entre pasos.
	‚Ä¢	Mostrar SuccessModal al guardar o enviar con √©xito.
	‚Ä¢	Asegurar que al terminar, el cliente y orden se reflejen inmediatamente en la lista sin recarga.

‚∏ª

‚úÖ 3. Validar datos antes de guardar

En el paso 1 (nuevo cliente), antes de guardar un nuevo cliente:
	‚Ä¢	Consultar la base de datos v√≠a /api/client/check-duplicate enviando c√©dula, correo y tel√©fono.
	‚Ä¢	Si hay duplicado, mostrar error con mensaje visual.
	‚Ä¢	Si no hay duplicado, continuar con la creaci√≥n.

‚∏ª

‚úÖ 4. A√±adir l√≥gica de auto-guardado como ‚Äúborrador‚Äù

Cada vez que el usuario pasa al siguiente paso, se debe hacer una llamada a /api/shipping/draft para guardar parcial:
	‚Ä¢	Crea o actualiza la orden con status: "draft"
	‚Ä¢	Guarda los datos ingresados hasta ese punto
	‚Ä¢	Debe funcionar incluso si el usuario no ha llegado hasta el paso final.

‚∏ª

‚úÖ 5. Conectar con backend para reflejar resultados en CRM sin recargar

Cuando se crea o actualiza un cliente u orden, el frontend debe:
	‚Ä¢	Volver a consultar (con fetch) el listado de pedidos del CRM (si est√° en el mismo layout).
	‚Ä¢	Actualizar la tabla sin recargar toda la p√°gina.

‚∏ª

‚úÖ 6. Rutas del backend (Node/Express)

En server/routes-shipping-react.ts:
	‚Ä¢	Aseg√∫rate de tener:
	‚Ä¢	POST /api/shipping/check-duplicate para verificar duplicados.
	‚Ä¢	POST /api/shipping/draft para guardar orden parcial.
	‚Ä¢	POST /api/shipping/final para guardar completa.
	‚Ä¢	GET /api/shipping/list para recargar las √≥rdenes.
Todas deben funcionar con validaciones b√°sicas y status HTTP apropiados.

‚∏ª

‚úÖ 7. Registrar rutas en server/index.ts

Aseg√∫rate de tener: