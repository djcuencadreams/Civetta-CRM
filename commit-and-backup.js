/**
 * Sistema Integrado de Commit y Backup Inteligente - Civetta CRM
 * Cumple con est√°ndares ISO 9001, IEEE 1471, TOGAF, DevOps, Agile
 * 
 * FUNCIONALIDADES MEJORADAS:
 * - Actualizaci√≥n autom√°tica de documentaci√≥n ANTES del commit
 * - Commit con mensaje y staging autom√°tico
 * - Backup inteligente con exclusiones optimizadas
 * - Logging completo y reporte de m√©tricas
 * - Cumplimiento de est√°ndares internacionales
 * 
 * IMPORTANTE: SIEMPRE USA ESTE SCRIPT EN LUGAR DE 'git commit' PARA ASEGURAR
 * DOCUMENTACI√ìN ACTUALIZADA Y BACKUP AUTOM√ÅTICO.
 * 
 * Uso:
 *   1. Interactivo: node commit-and-backup.js
 *   2. Con argumentos: node commit-and-backup.js "Mensaje del commit"
 */

import { execSync } from 'child_process';
import { spawn } from 'child_process';
import readline from 'readline';

// Funci√≥n principal para ejecutar el proceso de commit y backup inteligente
async function executeCommitAndBackup(commitMessage) {
  console.log('üöÄ Iniciando Sistema Integrado de Commit y Backup Inteligente...');
  console.log('üìã Cumplimiento: ISO 9001, IEEE 1471, TOGAF, DevOps, Agile\n');
  
  try {
    // Paso 1: ACTUALIZAR DOCUMENTACI√ìN AUTOM√ÅTICAMENTE
    console.log('üìö PASO 1: Actualizando documentaci√≥n autom√°tica...');
    await executeDocumentationUpdate();
    console.log('‚úÖ Documentaci√≥n actualizada y sincronizada\n');

    // Paso 2: REALIZAR GIT ADD
    console.log('üìÅ PASO 2: A√±adiendo archivos al staging area...');
    execSync('git add .', { stdio: 'inherit' });
    console.log('‚úÖ Archivos a√±adidos correctamente (incluyendo documentaci√≥n actualizada)\n');

    // Paso 3: REALIZAR COMMIT
    console.log(`üíæ PASO 3: Realizando commit: "${commitMessage}"`);
    execSync(`git commit -m "${commitMessage}"`, { stdio: 'inherit' });
    console.log('‚úÖ Commit realizado exitosamente\n');

    // Paso 4: EJECUTAR BACKUP INTELIGENTE
    console.log('üì¶ PASO 4: Ejecutando sistema de backup inteligente...');
    await executeIntelligentBackup();
    console.log('‚úÖ Backup inteligente completado\n');

    // Paso 5: REPORTE FINAL
    console.log('üéâ PROCESO COMPLETADO EXITOSAMENTE:');
    console.log('   üìö Documentaci√≥n: Actualizada autom√°ticamente');
    console.log(`   üìù Commit: "${commitMessage}"`);
    console.log('   üì¶ Backup: Optimizado y comprimido');
    console.log('   üìç Ubicaci√≥n: BackupforChatGPT/');
    console.log('   ‚úÖ Est√°ndares: ISO 9001, IEEE 1471, TOGAF cumplidos');

  } catch (error) {
    console.error('‚ùå Error en el proceso:', error.message);
    throw error;
  }
}

/**
 * Ejecuta la actualizaci√≥n autom√°tica de documentaci√≥n
 */
async function executeDocumentationUpdate() {
  try {
    // Ejecutar el sistema de an√°lisis y documentaci√≥n autom√°tica
    await executeCommand('node', ['scripts/auto-update-docs.js']);
    console.log('   ‚úÖ SYSTEM_DOCUMENTATION.md actualizada');
    console.log('   ‚úÖ BACKUP_MANIFEST.md sincronizada');
    console.log('   ‚úÖ Gu√≠as de revisi√≥n verificadas');
    console.log('   ‚úÖ M√©tricas de proyecto actualizadas');
  } catch (error) {
    console.warn('   ‚ö†Ô∏è Warning: Error actualizando documentaci√≥n autom√°tica');
    console.warn(`   ‚ö†Ô∏è ${error.message}`);
    console.log('   ‚ÑπÔ∏è Continuando con documentaci√≥n existente...');
  }
}

/**
 * Ejecuta el sistema de backup inteligente
 */
async function executeIntelligentBackup() {
  try {
    // Usar el nuevo sistema de backup inteligente
    await executeCommand('node', ['scripts/backup-code-only.js']);
    console.log('   ‚úÖ Backup optimizado (~200-300KB sin multimedia)');
    console.log('   ‚úÖ Exclusiones inteligentes aplicadas');
    console.log('   ‚úÖ Documentaci√≥n sincronizada incluida');
    console.log('   ‚úÖ Logs de proceso generados');
  } catch (error) {
    console.warn('   ‚ö†Ô∏è Backup inteligente fall√≥, usando m√©todo tradicional...');
    try {
      await executeCommand('node', ['zip-project.js']);
      console.log('   ‚úÖ Backup tradicional completado como respaldo');
    } catch (fallbackError) {
      console.error('   ‚ùå Error tambi√©n en backup tradicional:', fallbackError.message);
      throw fallbackError;
    }
  }
}

/**
 * Ejecuta un comando con spawn para mejor control
 */
function executeCommand(command, args = []) {
  return new Promise((resolve, reject) => {
    console.log(`   üîß Ejecutando: ${command} ${args.join(' ')}`);
    
    const process = spawn(command, args, {
      stdio: 'inherit'
    });

    process.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Comando fall√≥ con c√≥digo ${code}`));
      }
    });

    process.on('error', (error) => {
      reject(error);
    });
  });
}

// Verificar si se proporcion√≥ un mensaje de commit como argumento
const args = process.argv.slice(2);
if (args.length > 0) {
  // Obtener el mensaje de commit desde los argumentos
  const commitMessage = args.join(' ');
  if (!commitMessage.trim()) {
    console.error('‚ùå El mensaje de commit no puede estar vac√≠o');
    process.exit(1);
  }
  
  // Ejecutar el proceso con el mensaje proporcionado
  executeCommitAndBackup(commitMessage)
    .then(() => process.exit(0))
    .catch(() => process.exit(1));
} else {
  // Modo interactivo: crear una interfaz de l√≠nea de comandos
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  // Preguntar al usuario por el mensaje de commit
  rl.question('üîç Ingrese el mensaje de commit: ', async (commitMessage) => {
    if (!commitMessage.trim()) {
      console.error('‚ùå El mensaje de commit no puede estar vac√≠o');
      rl.close();
      process.exit(1);
      return;
    }

    try {
      await executeCommitAndBackup(commitMessage);
      rl.close();
      process.exit(0);
    } catch (error) {
      rl.close();
      process.exit(1);
    }
  });
}